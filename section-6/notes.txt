// you should add key when updating numColumns
<FlatList
    key={""}
    data={CATEGORIES}
    keyExtractor={(item) => item.id}
    renderItem={renderCategoryItem}
    numColumns={2}
/>

for ios you need to add backgroundColor for shadow to have an effect


// wrap your entire app with it
<NavigationContainer>
    <CategoriesScreen />
</NavigationContainer>

// in docs under api reference -> navigators you find all the supported navigators

npm install @react-navigation/native-stack


<StatusBar style="dark" />
<NavigationContainer>
<Stack.Navigator initialRouteName="ProductDetails">
    <Stack.Screen name="MealsCategories" component={CategoriesScreen} />
    <Stack.Screen name="MealsOverview" component={MealsOverviewScreen} />
</Stack.Navigator>
</NavigationContainer>

{navigation, route} // components that uses stack will receive navigation props
navigation.navigate("MealsOverview",{
    categoryId: itemData.item.id,
});
// an alternative to navigate in non screen components
const navigation = useNavigation();
const catId = route.params.categoryId;
// an alternative to route in non screen components
const route = useRoute();

// for image from web you need to add styles for width and height
<Image source={{uri:imageUrl}}/>

<NavigationContainer>
    <Stack.Navigator
        screenOptions={{
        headerStyle: { backgroundColor: "#351401" },
        headerTintColor: "white",
        contentStyle: {
            backgroundColor: "#3f2f25", // for main screen content
        },
        }}
    >
        <Stack.Screen
            name="MealsCategories"
            component={CategoriesScreen}
            options={{
                title: "All Categories",
            }}
        />
        <Stack.Screen
            name="MealsOverview"
            component={MealsOverviewScreen}
            // options={({ navigation, route }) => {
            //   const catId = route.params.categoryId;
            //   return {
            //     title: catId,
            //   };
            // }}
        />
    </Stack.Navigator>
</NavigationContainer>
// alternative to the comments above inside useEffect or useLayoutEffect to set the options before first render so you don't see values changing
navigation.setOptions({});

// but here it is not possible to interact with the screen from the header
<Stack.Screen
    name="MealDetail"
    component={MealDetailScreen}
    options={{
        headerRight: () => {
            return <Button title="Tap me!" />;
        },
    }}
/>
if you need such interaction then set the options in the screen
// set layouteffect......

// always wrap components with NavigationContainer for all navigations
<NavigationContainer>
</NavigationContainer>

navigation.toggleDrawer();

<Drawer.Navigator
    screenOptions={{
        headerStyle: { backgroundColor: "#3c0a6b" },
        headerTintColor: "white",
        drawerActiveBackgroundColor: "#f0e1ff",
        drawerActiveTintColor: "#3c0a6b",
        // drawerStyle: { backgroundColor: "#ccc" },
    }}
    >
    <Drawer.Screen
        name="Welcome"
        component={WelcomScreen}
        options={{
        drawerLabel: "Welcome Screen",
        drawerIcon: ({ color, focused, size }) => (
            <Ionicons name="home" color={color} size={size} />
        ),
        }}
    />
    <Drawer.Screen
        name="User"
        component={UserScreen}
        options={{
        drawerIcon: ({ color, focused, size }) => (
            <Ionicons name="person" color={color} size={size} />
        ),
        }}
    />
</Drawer.Navigator>

<BottomTab.Navigator
    screenOptions={{
        headerStyle: { backgroundColor: "#3c0a6b" },
        headerTintColor: "white",
        tabBarActiveTintColor: "#3c0a6b",
    }}
    >
    <BottomTab.Screen
        name="Welcome"
        component={WelcomScreen}
        options={{
        tabBarIcon: ({ color, size }) => (
            <Ionicons name="home" color={color} size={size} />
        ),
        }}
    />
    <BottomTab.Screen
        name="User"
        component={UserScreen}
        options={{
        tabBarIcon: ({ color, size }) => (
            <Ionicons name="person" color={color} size={size} />
        ),
        }}
    />
</BottomTab.Navigator>